let properties = [
  { name: "megawatt", min: 1.0, max: 2570, default: 1285 },
  { name: "latitude", min: 26, max: 56, default: 41 },
  { name: "longtitude", min: -124, max: -66, default: -95 },
];

let categories = ["Biomass", "Coal", "Gas", "Oil", "Cogeneration", "Geothermal", "Hydro", "Nuclear", "Solar", "Storage", "Waste", "Wind"];

let INPUT_FILE = "/data/training.csv"
var categoryButtons = {};

var propertyControls = {};
var headWidthSlider;
var headHeightSlider;
var eyeSizeSlider;
var eyeDistanceSlider;
var eyeLocationSlider;
var targetSpan;
var classifiedSpan;

var canvas;
var nn;
var table;
var loopCount = 0;

var classifyResults = false;
var testingResultsComplete = false;
var dataArray = [];
var dataArrayIndex = 0;
var resultsMatrix = [];

function preload() {
  //my table is comma separated value "csv"
  //and has a header specifying the columns labels
  table = loadTable(INPUT_FILE, "csv");
}

function setup() {
  canvas = createCanvas(200, 200);
  canvas.id("canvas");
  angleMode(DEGREES);
  // This code creates the sliders for properties and hides them
  for (var i = 0; i < properties.length; i++) {
    currentProperty = properties[i];
    let newSlider = createSlider(
      currentProperty.min,
      currentProperty.max,
      currentProperty.default
    );
    newSlider.position(10, 210 + 20 * i);
    newSlider.style("width", "80px");
    newSlider.changed(classify);
    newSlider.parent("sliders");
    newSlider.hide();
    let newSpan = createSpan(currentProperty.name);
    newSpan.position(100, 210 + 20 * i);
    newSpan.hide();
    propertyControls[currentProperty.name] = newSlider;
  }
  // This code creates the buttons for each category
  for (var i = 0; i < categories.length; i++) {
    let button = createButton(categories[i]);
    button.position(220, 0 + 35 * i);
    button.mouseClicked(randomizeProperties);
    button.class("btn btn-primary");
    button.hide();
    categoryButtons[categories[i]] = button;
  }

  targetSpan = createSpan("target");
  targetSpan.parent("#target");

  classifiedSpan = createSpan("classified");
  classifiedSpan.parent("#classifiedFace");

  
  // This portion of the code sets up the inputs for the machine learning algorithm from the CSV file.
  const options = {
    // inputs: ['megawatt', 'latitude','longtitude'],
    //outputs: ['fueltype'] ,
    inputs: 3, // This is the number of input values
    outputs: 1, //this is the number of output values
    task: "classification", // We use classification because we want the output to be one of a few specific labels for happy, sad, etc.
    debug: false, // we don't need any training progress because this is a testing program

  };

  // Create the neural network
  nn = ml5.neuralNetwork(options);
  
  // Define the names of the trained model files to be brought into the sketch
  const modelDetails = {
    model: 'model/model.json',
    metadata: 'model/model_meta.json',
    weights: 'model/model.weights.bin'
  }
  
  // Load the model, and when complete, run the modelLoaded function.
  nn.load(modelDetails, modelLoaded)
  
}

function modelLoaded(){
  console.log("model loaded")
  
  // Run the function to load the data from the CSV file.
  loadData()
}

function loadData() {
  
  
  // The code below gets the data from the loaded CSV file and stores it in input/output arrays to be read into the neural network.
  
  // For each row of the table,
  for (let r = 0; r < table.getRowCount(); r++) {
    var rowArray = [];
    // Store each value in that row in a new row array.
    // table.rows[r].arr.length - 2 means get all of the columns except the last one
    for (var i = 0; i < table.rows[r].arr.length - 1; i++) {
      rowArray.push(parseInt(table.rows[r].arr[i]));
    }
    // Create a single element array for the output value which is in the rightmost column
    let outputIndex = table.rows[r].arr.length - 1
    rowArray.push(table.rows[r].arr[outputIndex]);

    dataArray.push(rowArray);
  }
  

  // Build a confusion matrix for each element of the categories array.
  for (var i = 0; i < categories.length; i++) {
    let newRow = [];
    for (var j = 0; j < categories.length; j++) {
      newRow.push(0);
    }
    resultsMatrix.push(newRow);
  }
  //console.log(resultsMatrix)
  console.log("data loaded");
}

function classify() {
  //console.log("begin classify");
  megawatt = propertyControls["megawatt"].value();
  latitude = propertyControls["latitude"].value();
  longtitude = propertyControls["longtitude"].value();

  let input = [
    megawatt,
    latitude,
    longtitude,
  ];
   //console.log(input)
  nn.classify(input, handleResults);
}

function handleResults(error, result) {
  if (error) {
    console.error(error);
    return;
  }
  
  classifiedSpan.html("AI classified as: "+ result[0].label);
  let targetIndex = categories.indexOf(targetSpan.html())
  let classifiedIndex = categories.indexOf(result[0].label)
  
  resultsMatrix[classifiedIndex][targetIndex] += 1
  
}

function draw() {
  
  megawatt = propertyControls["megawatt"].value();
  latitude = propertyControls["latitude"].value();
  longtitude = propertyControls["longtitude"].value();

  if (loopCount > 1 && testingResultsComplete == false) {
    loopCount = 0;
    dataArrayIndex += 1;
    if (dataArrayIndex < dataArray.length) {
     //drawFace(mouthWidth,mouthHeight,mouthCurve,eyeSize,eyeDistance,eyeLocation,eyeBrowLocation,eyeBrowAngle,eyeBrowLength)
      loadCurrentFace();
      
      classify()
    } else {
      testingResultsComplete = true;
      console.log("processed all data");
      console.table(resultsMatrix)
    }
  } else {
    loopCount += 1;
  }
}

// function drawFace(
//   mouthHeight,
//   mouthWidth,
//   mouthCurve,
//   eyeSize,
//   eyeDistance,
//   eyeLocation,
//   eyeBrowLocation,
//   eyebrowAngle,
//   eyeBrowLength
// ) {
//   background(220);

//   noStroke();
//   fill(130, 130, 250);
//   circle(width / 2, height / 2, 0.9 * width);
//   stroke(10);
//   fill(244, 224, 77);
//   ellipse(width / 2, height / 2, mouthWidth, mouthHeight);

//   //beak

//   beginShape();
//   vertex(width / 2 - mouthWidth / 2, height / 2);
//   quadraticVertex(
//     width / 2,
//     width / 2 - mouthCurve,
//     width / 2 + mouthWidth / 2,
//     height / 2
//   );
//   endShape();

//   //eyes
//   fill(10);
//   circle(width / 2 + eyeDistance, width / 2 - eyeLocation, eyeSize);
//   circle(width / 2 - eyeDistance, width / 2 - eyeLocation, eyeSize);
//   fill(250);
//   circle(width / 2 + eyeDistance, width / 2 - eyeLocation, 0.9 * eyeSize);
//   circle(width / 2 - eyeDistance, width / 2 - eyeLocation, 0.9 * eyeSize);
//   fill(0);
//   circle(width / 2 + eyeDistance, width / 2 - eyeLocation, 0.1 * eyeSize);
//   circle(width / 2 - eyeDistance, width / 2 - eyeLocation, 0.1 * eyeSize);

//   // eyebrows
//   strokeWeight(4);
//   push();
//   translate(width / 2 + eyeDistance, width / 2 - eyeLocation - eyeBrowLocation);
//   rotate(eyeBrowAngle);
//   line(-eyeBrowLength, 0, eyeBrowLength, 0);
//   pop();
//   push();
//   translate(width / 2 - eyeDistance, width / 2 - eyeLocation - eyeBrowLocation);
//   rotate(-eyeBrowAngle);
//   line(-eyeBrowLength, 0, eyeBrowLength, 0);
//   pop();
// }

function randomizeProperties() {
  let faceData = {};
  for (var i = 0; i < properties.length; i++) {
    let currentProperty = properties[i];
    faceData[currentProperty.name] = propertyControls[
      currentProperty.name
    ].value();
    let randomPropertyValue =
      Math.round(Math.random() * (currentProperty.max - currentProperty.min)) +
      currentProperty.min;
    propertyControls[currentProperty.name].value(randomPropertyValue);
  }
  //faceData['output'] = event.target.innerText
  classify();
}

function loadCurrentFace() {
  currentRow = dataArray[dataArrayIndex];
  propertyControls["megawatt"].value(currentRow[0]);
  propertyControls["latitude"].value(currentRow[1]);
  propertyControls["longtitude"].value(currentRow[2]);
  targetSpan.html(currentRow[3]);
}
